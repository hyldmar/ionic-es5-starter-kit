function ctrlMainTitle(n){"use strict";var o=this;o.titulo=n.titulo}function ctrlH3Name(n){"use strict";var o=this;o.seuNome=n.name}!function(){"use strict";function n(n,o){function e(){function n(){return(65536*(1+Math.random())|0).toString(16).substring(1)}return(n()+n()+"-"+n()+"-4"+n().substr(0,3)+"-"+n()+"-"+n()+n()+n()).toLowerCase()}function t(n){var o=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return o.test(n)}function r(n){return/^(https?):\/\/((?:[a-z0-9.-]|%[0-9A-F]{2}){3,})(?::(\d+))?((?:\/(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*)*)(?:\?((?:[a-z0-9-._~!$&'()*+,;=:\/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-z0-9-._~!$&'()*+,;=:\/?@]|%[0-9A-F]{2})*))?$/i.test(n)}function i(n,o,e){for(var t=n.toString();t.length<o;)t=e+t;return t}function a(n){try{return unescape(encodeURIComponent(n))}catch(o){return n}}function u(n){try{return decodeURIComponent(escape(n))}catch(o){return n}}function c(n){var o=[],e=n.split(/\r\n|\r|\n/g),t="";for(var r in e)!e[r].startsWith(" ")&&e[r].indexOf("=")>-1&&t.length>0&&(o.push(t),t=""),t+=e[r].trim();o.push(t);var i={};for(var r in o){var a=o[r].indexOf("=");a>-1&&(i[o[r].substr(0,a)]=o[r].substr(a+1))}return i}function l(e){var t=n.defer();return o(function(){t.resolve(e())},0),t.promise}return{createUuid:e,isEmail:t,isUrl:r,padLeft:i,encodeUTF8:a,decodeUTF8:u,parseKeyValue:c,realAsync:l}}angular.module("app").factory("Utils",n)}(),function(){"use strict";function n(n){function o(){console.info(e.credenciais),n.go("main")}var e=this;e.credenciais={login:"",senha:""},e.fazLogin=o}angular.module("app").controller("LoginCtrl",n),n.$inject=["$state"]}(),function(){"use strict";function n(){function n(n,o,e,t){}var o={restrict:"E",templateUrl:"app/main/main-title.directive.html",scope:{titulo:"="},link:n,controller:ctrlMainTitle,controllerAs:"vm"};return o}angular.module("app").directive("mainTitle",n)}(),ctrlMainTitle.$inject=["$scope"],function(){"use strict";function n(n){function o(){console.log("loginClick()"),n.go("login")}var e=this;e.lorem="Lorem ipsum dolor sit amet, consectetur adipisicing elit.",e.nome="Ol√° fulano!",e.empresa="WGBN Software House",e.loginClick=o}angular.module("app").controller("MainCtrl",n),n.$inject=["$state"]}(),function(){"use strict";function n(){function n(n,o,e,t){}var o={restrict:"E",templateUrl:"app/common/directives/h3-name.directive.html",scope:{name:"="},link:n,controller:ctrlH3Name,controllerAs:"vm"};return o}angular.module("app").directive("h3Name",n)}(),ctrlH3Name.$inject=["$scope"],function(){"use strict";function n(n,o){function e(){return o.onReady(i,a).then(function(){return n.AppVersion})}function t(){return o.onReady(i,a).then(function(){return n.AppVersion.version})}function r(){return o.onReady(i,a).then(function(){return n.AppVersion.build})}var i="AppVersion",a=function(){return n.AppVersion};return{get:e,getVersion:t,getBuild:r}}angular.module("app").factory("AppVersionPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||window.AppVersion||(window.AppVersion={version:"1.2.3",build:"1234"})})}(),function(){"use strict";function n(n,o,e,t,r){function i(o,i){return r.onReady(l,s).then(function(){var r=function(o){i?i(o).then(function(){n.plugins.backgroundGeoLocation.finish()},function(o){e.error("pluginError:"+l,o),n.plugins.backgroundGeoLocation.finish()}):n.plugins.backgroundGeoLocation.finish()},a=function(n){e.error("pluginError:"+l,n)},u=angular.extend({},d,o);return n.plugins.backgroundGeoLocation.configure(r,a,u),t.getCurrentPosition()})}function a(){return r.onReady(l,s).then(function(){n.plugins.backgroundGeoLocation.start()})}function u(){return r.onReady(l,s).then(function(){n.plugins.backgroundGeoLocation.stop()})}function c(n,o){return i(n,o).then(function(){return a()})}var l="BackgroundGeolocation",s=function(){return n.plugins&&n.plugins.backgroundGeoLocation},f={enable:c,disable:u,configure:i,start:a,stop:u},d={desiredAccuracy:10,stationaryRadius:20,distanceFilter:30,notificationTitle:"Location tracking",notificationText:"ENABLED",activityType:"AutomotiveNavigation",debug:!0,stopOnTerminate:!0};return f}angular.module("app").factory("BackgroundGeolocationPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.plugins||(window.plugins={}),window.plugins.backgroundGeoLocation||(window.plugins.backgroundGeoLocation=function(){var n=null,o=null,e=null;return{configure:function(e,t,r){n=r,o=e},start:function(){null===e&&(e=setInterval(function(){window.navigator.geolocation.getCurrentPosition(function(n){o(n)})},3e3))},stop:function(){null!==e&&(clearInterval(e),e=null)},finish:function(){}}}()))})}(),function(){"use strict";function n(n,o,e,t){function r(){return c?(e.warn(a+" is locked"),o.reject()):(c=!0,t.onReady(a,u).then(function(){var t=o.defer();return n.cordova.plugins.barcodeScanner.scan(function(n){c=!1,t.resolve(n)},function(n){e.error("pluginError:"+a,n),c=!1,t.reject(n)}),t.promise}))}function i(r,i){return t.onReady(a,u).then(function(){var t=o.defer();return n.cordova.plugins.barcodeScanner.encode(r,i,function(n){t.resolve(n)},function(n){e.error("pluginError:"+a,n),t.reject(n)}),t.promise})}var a="Barcode",u=function(){return n.cordova&&n.cordova.plugins&&n.cordova.plugins.barcodeScanner},c=!1;return{scan:r,encode:i}}angular.module("app").factory("BarcodePlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.cordova||(window.cordova={}),window.cordova.plugins||(window.cordova.plugins={}),window.cordova.plugins.barcodeScanner||(window.cordova.plugins.barcodeScanner={Encode:{EMAIL_TYPE:"EMAIL_TYPE",PHONE_TYPE:"PHONE_TYPE",SMS_TYPE:"SMS_TYPE",TEXT_TYPE:"TEXT_TYPE"},format:{all_1D:61918,aztec:1,codabar:2,code_39:4,code_93:8,code_128:16,data_MATRIX:32,ean_8:64,ean_13:128,itf:256,maxicode:512,msi:131072,pdf_417:1024,plessey:262144,qr_CODE:2048,rss_14:4096,rss_EXPANDED:8192,upc_A:16384,upc_E:32768,upc_EAN_EXTENSION:65536},scan:function(n,o){var e=window.prompt("Texte :");n&&n(e?{text:e,format:"QR_CODE",cancelled:!1}:{text:"",format:"",cancelled:!0})},encode:function(n,o,e,t){alert("barcodeScanner.encode() not implemented !"),e({})}}))})}(),function(){"use strict";function n(n,o,e,t){function r(r){return t.onReady(u,c).then(function(){var t=angular.extend({quality:50,destinationType:n.Camera.DestinationType.FILE_URI,sourceType:n.Camera.PictureSourceType.CAMERA,allowEdit:!1,encodingType:n.Camera.EncodingType.JPEG,mediaType:n.Camera.MediaType.PICTURE,cameraDirection:n.Camera.Direction.BACK,correctOrientation:!0,saveToPhotoAlbum:!1},r),i=o.defer();return n.navigator.camera.getPicture(function(n){i.resolve(n)},function(n){e.error("pluginError:"+u,n),i.reject(n)},t),i.promise})}function i(){return r({})}function a(){return r({sourceType:n.Camera.PictureSourceType.PHOTOLIBRARY})}var u="Camera",c=function(){return n.navigator&&n.navigator.camera};return{getPicture:r,takePicture:i,findPicture:a}}angular.module("app").factory("CameraPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.navigator||(window.navigator={}),window.navigator.camera||(window.navigator.camera=function(){window.Camera={DestinationType:{DATA_URL:0,FILE_URI:1,NATIVE_URI:2},Direction:{BACK:0,FRONT:1},EncodingType:{JPEG:0,PNG:1},MediaType:{PICTURE:0,VIDEO:1,ALLMEDIA:2},PictureSourceType:{PHOTOLIBRARY:0,CAMERA:1,SAVEDPHOTOALBUM:2},PopoverArrowDirection:{ARROW_UP:1,ARROW_DOWN:2,ARROW_LEFT:4,ARROW_RIGHT:8,ARROW_ANY:15}};var n=JSON.parse(JSON.stringify(window.Camera));return n.getPicture=function(n,o,e){var t=window.prompt("Image uri :");t?n&&n(t):o&&o()},n}()))})}(),function(){"use strict";function n(n,o,e,t){function r(){return t.onReady(a,u).then(function(){var t=o.defer();return n.plugins.DeviceAccounts.get(function(n){t.resolve(n)},function(n){e.error("pluginError:"+a,n),t.reject(n)}),t.promise})}function i(){return t.onReady(a,u).then(function(){var t=o.defer();return n.plugins.DeviceAccounts.getEmail(function(n){t.resolve(n)},function(n){e.error("pluginError:"+a,n),t.reject(n)}),t.promise})}var a="DeviceAccounts",u=function(){return n.plugins&&n.plugins.DeviceAccounts},c={getAccounts:r,getEmail:i};return c}angular.module("app").factory("DeviceAccountsPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.plugins||(window.plugins={}),window.plugins.DeviceAccounts||(window.plugins.DeviceAccounts={get:function(n,o){n([{type:"com.google",name:"test@example.com"}])},getByType:function(n,o,e){o([{type:"com.google",name:"test@example.com"}])},getEmails:function(n,o){n(["test@example.com"])},getEmail:function(n,o){n("test@example.com")}}))})}(),function(){"use strict";function n(n,o){function e(){return o.onReady(t,r).then(function(){return n.device})}var t="Device",r=function(){return n.device};return{getDevice:e}}angular.module("app").factory("DevicePlugin",n),ionic.Platform.ready(function(){if(!(ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||window.device)){var n={available:!0,cordova:"3.6.4",manufacturer:"LGE",model:"Nexus 4",platform:"Android",uuid:"891b8e516ae6bd65",version:"5.0.1"};window.device=n}})}(),function(){"use strict";function n(n,o,e,t){function r(r,i,a){return t.onReady(s,f).then(function(){var e=o.defer();return n.navigator.notification.alert(r,function(){e.resolve()},i,a),e.promise},function(o){e.error("pluginError:"+s,o),n.alert(r)})}function i(r,i,a){return t.onReady(s,f).then(function(){var e=o.defer();return n.navigator.notification.confirm(r,function(n){e.resolve(n)},i,a),e.promise},function(o){return e.error("pluginError:"+s,o),l(n.confirm(r))})}function a(r,i,a,u){return t.onReady(s,f).then(function(){var e=o.defer();return n.navigator.notification.prompt(r,function(n){e.resolve(n)},i,a,u),e.promise},function(o){e.error("pluginError:"+s,o);var t=n.prompt(r,u);return{buttonIndex:l(t),input1:t}})}function u(r){return r||(r=1),t.onReady(s,f).then(function(){n.navigator.notification.beep(r)},function(n){e.error("pluginError:"+s,n),v?v(r):o.reject(n)})}function c(n){return 1===n}function l(n){return n?1:2}var s="Dialogs",f=function(){return n.navigator&&n.navigator.notification},d={alert:r,confirm:function(n,o){return i(n,o).then(function(n){return c(n)})},confirmMulti:i,prompt:function(n,o,e){return a(n,o,null,e).then(function(n){return n.confirm=c(n.buttonIndex),n})},promptMulti:a,beep:u},p=window.AudioContext||window.webkitAudioContext;if(p)var m=new p,g=function(o){var e=200,t=0;o||(o=function(){});var r=m.createOscillator();r.type=t,r.connect(m.destination),r.noteOn(0),n.setTimeout(function(){r.noteOff(0),o()},e)},v=function(o){o>0&&g(function(){n.setTimeout(function(){v(o-1)},500)})};return d}angular.module("app").factory("DialogPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.navigator||(window.navigator={}),window.navigator.notification||(window.navigator.notification=function(){function n(n){var o=200,t=0;n||(n=function(){});var r=e.createOscillator();r.type=t,r.connect(e.destination),r.noteOn(0),window.setTimeout(function(){r.noteOff(0),n()},o)}function o(e){e>0&&n(function(){window.setTimeout(function(){o(e-1)},500)})}var e=new(window.AudioContext||window.webkitAudioContext);return{alert:function(n,o,e,t){window.alert(n),o&&o()},confirm:function(n,o,e,t){var r=window.confirm(n);o&&o(r?1:2)},prompt:function(n,o,e,t,r){var i=window.prompt(n,r);o&&o({buttonIndex:i?1:2,input1:i})},beep:o}}()))})}(),function(){"use strict";function n(n,o,e){function t(){return e.onReady(i,a).then(function(){var e=o.defer();return n.cordova.plugins.email.isAvailable(function(n){n?e.resolve():e.reject({message:"Unable to send email, no account configured."})}),e.promise})}function r(r,u){return e.onReady(i,a).then(function(){return t().then(function(){var e=o.defer();return u&&(r.app=u),n.cordova.plugins.email.open(r,function(){e.resolve()}),e.promise})})}var i="EmailComposer",a=function(){return n.cordova&&n.cordova.plugins&&n.cordova.plugins.email};return{isAvailable:t,open:r}}angular.module("app").factory("EmailComposerPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.cordova||(window.cordova={}),window.cordova.plugins||(window.cordova.plugins={}),window.cordova.plugins.email||(window.cordova.plugins.email={aliases:{gmail:"com.google.android.gm"},getDefaults:function(){return{app:"mailto",subject:"",body:"",to:[],cc:[],bcc:[],attachments:[],isHtml:!0}},isAvailable:function(n,o,e){"function"!=typeof o&&(e=null,o=n,n="mailto"),o(!0)},open:function(n,o,e){o()},addAlias:function(n,o){this.aliases[n]=o}}))})}(),function(){"use strict";function n(n,o,e){function t(n){return e.onReady(a,u).then(function(){var o=new FileUploadOptions;n=n||{};for(var e in n)o[e]=n[e];return o})}function r(n,t,r,i){return e.onReady(a,u).then(function(){var e=o.defer(),a=new FileTransfer;return i&&(a.onprogress=i),a.upload(n,t,function(n){e.resolve(n)},function(n){e.reject(n)},r),e.promise})}function i(n,t,r,i){return e.onReady(a,u).then(function(){var e=o.defer(),a=new FileTransfer;return a.download(n,t,function(n){e.resolve(n)},function(n){e.reject(n)},r,i),e.promise})}var a="FileTransfer",u=function(){return n.FileTransfer};return{options:t,upload:r,download:i}}angular.module("app").factory("FileTransferPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||window.FileTransfer||(window.FileTransfer=function(){},FileTransfer.prototype.upload=function(n,o,e,t,r,i){e&&e({})},FileTransfer.prototype.download=function(n,o,e,t,r,i){e&&e({})},window.FileUploadOptions=function(){})})}(),function(){"use strict";function n(n,o,e,t){function r(o,e){return void 0===e?o.startsWith("file://")||o.startsWith("content://")?o:n.cordova.file.dataDirectory+o:e+o}function i(i,a){return t.onReady(A,R).then(function(){var t=o.defer(),u=r(i,a);return n.resolveLocalFileSystemURL(u,function(n){t.resolve(n)},function(n){n||(n={}),n.path=u,n.code&&(n.message=T[n.code]),e.error("pluginError:"+A,n),t.reject(n)}),t.promise})}function a(n,e){return i(n,e).then(function(e){return e.isDirectory?u(e):o.reject({message:'Path "'+n+'" is not a directory !'})})}function u(n){var e=o.defer(),t=n.createReader();return t.readEntries(function(n){e.resolve(n)},function(n){e.reject(n)}),e.promise}function c(n,o){return i(n,o).then(function(n){return l(n,{})})}function l(n,e){return n.isFile?(e.entry=n,e.children=[],o.when(e)):u(n).then(function(t){return o.all(t.map(function(n){return l(n,{})})).then(function(o){return e.entry=n,e.children=o,e})})}function s(n,e){return i(n,e).then(function(n){var e=o.defer();return n.file(function(n){e.resolve(n)}),e.promise})}function f(n,e){return s(n,e).then(function(n){var e=o.defer(),t=new FileReader;return t.onloadend=function(n){var o=n.target.result;e.resolve(o)},t.readAsBinaryString(n),e.promise})}function d(n,e){return s(n,e).then(function(n){var e=o.defer(),t=new FileReader;return t.onloadend=function(n){var o=n.target.result,t=o.replace(/data:(image|application)\/(jpeg|png|zip);base64,/,"");e.resolve(t)},t.readAsDataURL(n),e.promise})}function p(n,o){return i("",o).then(function(o){return E(o,n.split("/"))})}function m(n,e,t){Logger.info("createFile("+n+")");var r=n.split("/"),i=r.pop();return p(r.join("/"),t).then(function(n){var t=o.defer();return n.getFile(i,{create:!0},function(n){null!==e&&void 0!==e?n.createWriter(function(o){o.onwriteend=function(o){t.resolve(n)},o.write(e)},function(n){t.reject(n)}):t.resolve(n)},function(n){t.reject(n)}),t.promise})}function g(n,e,t,r){var a=e.substr(0,e.lastIndexOf("/")+1),u=e.substr(e.lastIndexOf("/")+1);return o.all([i(n,t),p(a,r)]).then(function(n){var e=n[0],t=n[1],r=o.defer();return e.copyTo(t,u,function(n){r.resolve(n)},function(n){r.reject(n)}),r.promise})}function v(n,e){return i(n,e).then(function(e){var t=o.defer();return e.isDirectory?t.resolve({message:'Path "'+n+'" is not a file !'}):e.remove(function(){t.resolve()},function(n){t.reject(n)}),t.promise})}function w(n,e){var t=n.map(function(n){return v(n,e)});return o.all(t)}function h(n,e){return i(n,e).then(function(e){var t=o.defer();return e.isDirectory?e.removeRecursively(function(){t.resolve()},function(n){t.reject(n)}):t.resolve({message:'Path "'+n+'" is not a directory !'}),t.promise})}function y(n,e){var t=n.map(function(n){return removedFolder(n,e)});return o.all(t)}function P(n,e){return a(n,e).then(function(n){var t=n.map(function(n){var o=n.fullPath.substr(1);return h(o,e)});return o.all(t).then(function(n){return n},function(n){return n})})}function E(n,e){if(0===e.length)return o.when(n);var t=e.slice(),r=o.defer();return n.getDirectory(t.pop(),{create:!0},function(n){r.resolve(E(n,t))},function(n){r.reject(n)}),r.promise}var A="File",R=function(){return n.cordova&&n.cordova.file},T={1:"NOT_FOUND_ERR",2:"SECURITY_ERR",4:"NOT_READABLE_ERR",5:"ENCODING_ERR",6:"NO_MODIFICATION_ALLOWED_ERR",7:"INVALID_STATE_ERR",9:"INVALID_MODIFICATION_ERR",10:"QUOTA_EXCEEDED_ERR",11:"TYPE_MISMATCH_ERR",12:"PATH_EXISTS_ERR"};return{getFullPath:r,getFileEntry:i,getContent:a,getContentTree:c,getFile:s,getFileBinary:f,getFileBase64:d,createFolder:p,createFile:m,copyFile:g,removeFile:v,removeFiles:w,removeFolder:h,removeFolders:y,clear:P}}function o(n){return function(o,e){return o?n.getFullPath(o):e}}angular.module("app").factory("FilePlugin",n).filter("fullPath",o),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.cordova||(window.cordova={}),window.cordova.file||(window.cordova.file={applicationDirectory:"file:///android_asset/",applicationStorageDirectory:"file:///data/data/com.exemple.myapp/",cacheDirectory:"file:///data/data/com.exemple.myapp/cache/",dataDirectory:"file:///data/data/com.exemple.myapp/files/",documentsDirectory:null,externalApplicationStorageDirectory:"file:///storage/emulated/0/Android/data/com.exemple.myapp/",externalCacheDirectory:"file:///storage/emulated/0/Android/data/com.exemple.myapp/cache/",externalDataDirectory:"file:///storage/emulated/0/Android/data/com.exemple.myapp/files/",externalRootDirectory:"file:///storage/emulated/0/",sharedDirectory:null,syncedDataDirectory:null,tempDirectory:null},window.resolveLocalFileSystemURL=function(n,o,e){var t=n.substr(n.lastIndexOf("/")+1);o(FileEntry(t,n))},window.DirectoryEntry=function(n,o,e,t){},window.FileEntry=function(n,o,e,t){return{isFile:n.indexOf(".")>-1,isDirectory:n.indexOf(".")<0,createReader:function(){return{readEntries:function(n,o){n([])}}},createWriter:function(r,i){r({write:function(r){this.onwriteend&&this.onwriteend(new FileEntry(n,o,e,t))}})},getDirectory:function(n,r,i,a){i(new FileEntry(n,o+n,e,t+n))},getFile:function(n,r,i,a){i(new FileEntry(n,o+n,e,t+n))},remove:function(n,o){n()},toURL:function(n){return t}}}))})}(),function(){"use strict";function n(n,o,e,t,r){function i(i,c,l){var s={enableHighAccuracy:c?c:!0,timeout:i?i:1e4,maximumAge:l?l:0};return r.onReady(a,u).then(function(){var r=o.defer(),i=e(function(){r.reject({message:"Geolocation didn't responded within "+s.timeout+" millis :("})},s.timeout);return n.navigator.geolocation.getCurrentPosition(function(n){e.cancel(i),r.resolve(n)},function(n){e.cancel(i),t.error("pluginError:"+a,n),r.reject(n)},s),r.promise})}var a="Geolocation",u=function(){return n.navigator&&n.navigator.geolocation},c={getCurrentPosition:i};return c}angular.module("app").factory("GeolocationPlugin",n),ionic.Platform.ready(function(){!(ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad())})}(),function(){"use strict";function n(n,o){function e(e,i,a){return o.onReady(t,r).then(function(){n.cordova.InAppBrowser.open(e,i,a)})}var t="InAppBrowser",r=function(){return n.cordova&&n.cordova.InAppBrowser};return{open:e}}function o(n){function o(n){if(n)for(var o in e)if(0===n.indexOf(e[o]))return!0;return!1}var e=["http:","https:","tel:","sms:"];return{restrict:"A",scope:{url:"@href"},link:function(e,t,r){o(e.url)&&t.bind("click",function(o){o.preventDefault(),n.open(encodeURI(e.url),"_system","location=yes")})}}}angular.module("app").factory("InAppBrowserPlugin",n).directive("href",o),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.cordova||(window.cordova={}),window.cordova.InAppBrowser||(window.cordova.InAppBrowser={open:function(n,o,e){window.open(n,o,e)}}))})}(),function(){"use strict";function n(n,o){function e(){return o.onReady(r,i).then(function(){n.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0)})}function t(n){return o.onReady(r,i).then(function(){window.cordova.plugins.Keyboard.disableScroll(n)})}var r="Keyboard",i=function(){return n.cordova&&n.cordova.plugins&&n.cordova.plugins.Keyboard},a={hideKeyboardAccessoryBar:e,disableScroll:t};return a}angular.module("app").factory("KeyboardPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.cordova||(window.cordova={}),window.cordova.plugins||(window.cordova.plugins={}),window.cordova.plugins.Keyboard||(window.cordova.plugins.Keyboard=function(){var n={isVisible:!1,show:function(){n.isVisible=!0;var o=new Event("native.keyboardshow");o.keyboardHeight=284,window.dispatchEvent(o)},close:function(){n.isVisible=!1,window.dispatchEvent(new Event("native.keyboardhide"))},hideKeyboardAccessoryBar:function(n){},disableScroll:function(n){}};return n}()))})}(),function(){"use strict";function n(n,o,e){function t(o){return e.onReady(a,u).then(function(){n.plugin.notification.local.schedule(o)})}function r(t){return e.onReady(a,u).then(function(){var e=o.defer();return n.plugin.notification.local.cancel(t,function(){e.resolve()}),e.promise})}function i(o,t){return e.onReady(a,u).then(function(){n.plugin.notification.local.on(o,t)})}var a="LocalNotification",u=function(){return n.plugin&&n.plugin.notification&&n.plugin.notification.local},c={schedule:t,cancel:r,onClick:function(n){return i("click",n)}};return c}angular.module("app").factory("LocalNotificationPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.plugin||(window.plugin={}),window.plugin.notification||(window.plugin.notification={}),window.plugin.notification.local||(window.plugin.notification.local=function(){function n(n){var o=JSON.parse(JSON.stringify(e));for(var t in n)o[t]=n[t];return o}var o={},e={id:"0",title:"",text:"",every:0,at:new Date,badge:0,sound:"res://platform_default",data:null,icon:"res://icon",smallIcon:"res://ic_popup_reminder",ongoing:!1,led:"FFFFFF"},t={hasPermission:function(n,o){n&&n(!0)},registerPermission:function(n,o){n&&n(!0)},schedule:function(e,r,i){Array.isArray(e)||(e=[e]);for(var a in e){var u=n(e[a]);t.onadd&&t.onadd(u.id,"foreground",u.json),o[u.id]=u}r&&r()},cancel:function(n,e,r){t.oncancel&&t.oncancel(n,"foreground",o[n].json),delete o[n],e&&e()},cancelAll:function(n,e){for(var r in o)t.oncancel&&t.oncancel(o[r].id,"foreground",o[r].json),delete o[r];n&&n()},on:function(n,o){},isScheduled:function(n,e,t){e&&e(!!o[n])},getScheduledIds:function(n,e){if(n){var t=[];for(var r in o)t.push(o[r].id);n(t)}},isTriggered:function(n,o,e){o&&o(!1)},getTriggeredIds:function(n,o){n&&n([])},getDefaults:function(){return JSON.parse(JSON.stringify(e))},setDefaults:function(o){e=n(o)}};return t}()))})}(),function(){"use strict";function n(n,o,e,t,r){function i(o,i,a,s){return r.onReady(c,l).then(function(){var r=function(){i&&i()},l=function(n){t.error("pluginError:"+c,{src:o,code:n.code,message:u(n.code)}),a&&a(n)},f=function(n){s&&s(n)};return e.is("android")&&(o="/android_asset/www/"+o),new n.Media(o,r,l,f)})}function a(n){return 0===n?"Media.MEDIA_NONE":1===n?"Media.MEDIA_STARTING":2===n?"Media.MEDIA_RUNNING":3===n?"Media.MEDIA_PAUSED":4===n?"Media.MEDIA_STOPPED":"Unknown status <"+n+">"}function u(n){return 1===n?"MediaError.MEDIA_ERR_ABORTED":2===n?"MediaError.MEDIA_ERR_NETWORK":3===n?"MediaError.MEDIA_ERR_DECODE":4===n?"MediaError.MEDIA_ERR_NONE_SUPPORTED":"Unknown code <"+n+">"}var c="Media",l=function(){return n.Media},s={loadMedia:i,statusToMessage:a,errorToMessage:u};return s}angular.module("app").factory("MediaPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||window.Media||(window.Media=function(n,o,e,t){"function"!=typeof Audio&&"object"!=typeof Audio&&console.warn("HTML5 Audio is not supported in this browser");var r=new Audio;return r.src=n,r.addEventListener("ended",o,!1),r.load(),{getCurrentPosition:function(n,o){n(r.currentTime)},getDuration:function(){return isNaN(r.duration)?-1:r.duration},play:function(){r.play()},pause:function(){r.pause()},release:function(){},seekTo:function(n){},setVolume:function(n){r.volume=n},startRecord:function(){},stopRecord:function(){},stop:function(){r.pause(),o&&o()}}})})}(),function(){"use strict";function PushPlugin(n,o,e,t,r,i,a){function u(r,i){return e.is("android")?o.post("https://android.googleapis.com/gcm/send",{registration_ids:r,data:i},{headers:{Authorization:"key="+a.gcm.apiServerKey}}).then(function(){return!0}):(t.alert("Your platform don't have push support :("),n.when(!1))}function c(o){return i.onReady(f,d).then(function(){var e=n.defer(),r=l(function(n){e.resolve(n.regid),s(r)},g.type.REGISTERED);return t.plugins.pushNotification.register(function(n){},function(n){registerDefer.reject(n)},{senderID:o,ecb:"onPushNotification"}),e.promise})}function l(n,o){return i.onReady(f,d).then(function(){var e=p++;return m[e]={fn:n,type:o||g.type.MESSAGE},e})}function s(n){return i.onReady(f,d).then(function(){delete m[n]})}var f="Push",d=function(){return t.plugins&&t.plugins.pushNotification},p=1,m={},g={type:{ALL:"all",MESSAGE:"message",REGISTERED:"registered",ERROR:"error"},sendPush:u,register:c,onNotification:l,cancel:s};return t.onPushNotification=function(n){n.event===g.type.MESSAGE||n.event===g.type.REGISTERED||(n.event===g.type.ERROR?r.error("GCM error",n):r.error("unknown GCM event has occurred",n));for(var o in m)m[o].type!==g.type.ALL&&m[o].type!==n.event||m[o].fn(n)},g}angular.module("app").factory("PushPlugin",PushPlugin),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.plugins||(window.plugins={}),window.plugins.pushNotification||(window.plugins.pushNotification=function(){return{register:function(successCallback,errorCallback,options){setTimeout(function(){successCallback&&successCallback("OK"),options&&options.ecb&&eval(options.ecb)({event:"registered",regid:"registration_id"})},0)},setApplicationIconBadgeNumber:function(n,o,e){o&&o("Invalid action : setApplicationIconBadgeNumber")},showToastNotification:function(n,o,e){o&&o("Invalid action : showToastNotification")},unregister:function(n,o,e){},onDeviceReady:function(n){},registerDevice:function(n,o){n&&n("status")}}}()))})}(),function(){"use strict";function n(n,o,e,t){function r(r,i,a,u){return t.onReady(c,l).then(function(){var t=o.defer();return n.plugins.socialsharing.share(r,i||null,a||null,u||null,function(){t.resolve()},function(n){e.error("pluginError:"+c,n),t.reject(n)}),t.promise})}function i(r,i,a){return t.onReady(c,l).then(function(){var t=o.defer();return n.plugins.socialsharing.shareViaFacebookWithPasteMessageHint(r,i||null,a||null,"Tu peux coller le message par d√©faut si tu veux...",function(){t.resolve()},function(n){e.error("pluginError:"+c,n),t.reject(n)}),t.promise})}function a(r,i,a){return t.onReady(c,l).then(function(){var t=o.defer();return n.plugins.socialsharing.shareViaTwitter(r,i||null,a||null,function(){t.resolve()},function(n){e.error("pluginError:"+c,n),t.reject(n)}),t.promise})}function u(r,i,a){return t.onReady(c,l).then(function(){var t=o.defer();return n.plugins.socialsharing.shareViaEmail(r,i||null,null,null,null,a||null,function(){t.resolve()},function(n){e.error("pluginError:"+c,n),t.reject(n)}),t.promise})}var c="SocialSharing",l=function(){return n.plugins&&n.plugins.socialsharing},s={share:r,shareViaFacebook:i,shareViaTwitter:a,shareViaEmail:u};return s}angular.module("app").factory("SocialSharingPlugin",n),ionic.Platform.ready(function(){!(ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad())})}(),function(){"use strict";function n(n,o,e,t){function r(r){return t.onReady(a,u).then(function(){var t=angular.extend({name:"my.db",location:c.Documents},r),i=o.defer();if(window.sqlitePlugin)n.sqlitePlugin.openDatabase(t,function(n){i.resolve(n)},function(n){e.error("pluginError:"+a,n),i.reject(n)});else{e.warn("Storage: SQLite plugin not installed, falling back to WebSQL. Make sure to install cordova-sqlite-storage in production!");var u=window.openDatabase(t.name,"1.0","database",5242880);i.resolve(u)}return i.promise})}function i(n,e,r){return t.onReady(a,u).then(function(){var t=o.defer();return n.transaction(function(n){n.executeSql(e,r||[],function(n,o){for(var e=[],r=0;r<o.rows.length;r++)e.push(o.rows.item(r));t.resolve(e)},function(n){t.reject(n)})},function(n){},function(){}),t.promise})}var a="SQLite",u=function(){return n.sqlitePlugin||n.openDatabase},c={Documents:0,Library:1,LocalDatabase:2};return{open:r,query:i}}angular.module("app").factory("SQLitePlugin",n),ionic.Platform.ready(function(){!(ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad())})}(),function(){"use strict";function n(n,o,e,t){function r(r,u,c){return u||(u="short"),c||(c="bottom"),t.onReady(i,a).then(function(){var t=o.defer();return n.plugins.toast.show(r,u,c,function(){t.resolve()},function(n){e.error("pluginError:"+i,n),t.reject(n)}),t.promise})}var i="Toast",a=function(){return n.plugins&&n.plugins.toast};return{show:r,showShortTop:function(n){return r(n,"short","top")},showShortCenter:function(n){return r(n,"short","center")},showShortBottom:function(n){return r(n,"short","bottom")},showLongTop:function(n){return r(n,"long","top")},showLongCenter:function(n){return r(n,"long","center")},showLongBottom:function(n){return r(n,"long","bottom")}}}angular.module("app").factory("ToastPlugin",n),ionic.Platform.ready(function(){ionic.Platform.isAndroid()||ionic.Platform.isIOS()||ionic.Platform.isIPad()||(window.plugins||(window.plugins={}),window.plugins.toast||(window.plugins.toast={show:function(n,o,e,t,r){console.log("Toast: "+n),t&&window.setTimeout(t("OK"),0)},showShortTop:function(n,o,e){this.show(n,"short","top",o,e)},showShortCenter:function(n,o,e){this.show(n,"short","center",o,e)},showShortBottom:function(n,o,e){this.show(n,"short","bottom",o,e)},showLongTop:function(n,o,e){this.show(n,"long","top",o,e)},showLongCenter:function(n,o,e){this.show(n,"long","center",o,e)},showLongBottom:function(n,o,e){this.show(n,"long","bottom",o,e)}}))})}(),function(){"use strict";function n(n,o,e){function t(t,r){return n.ready().then(function(){return r()?void 0:(e.error("pluginNotFound:"+t),o.reject({message:"pluginNotFound:"+t}))})}return{onReady:t}}angular.module("app").factory("PluginUtils",n)}(),function(){"use strict";function n(){return function(n,o){var e=moment(n);return n&&e.isValid()?e.format(o?o:"D MMMM YYYY"):n}}function o(){return function(n,o){var e=moment(n);return n&&e.isValid()?e.format(o?o:"HH:mm"):n}}function e(){return function(n,o){var e=moment(n);return n&&e.isValid()?e.format(o?o:"DD/MM/YYYY HH:mm"):n}}function t(){return function(n){return n.slice().reverse()}}function r(){return function(n,o){return n.concat(o)}}function i(n){return function(o,e){if(!angular.isArray(o)&&!angular.isString(o))return o;e||(e=3);for(var t=[],r=0;r<o.length;r++){
var i=parseInt(r/e,10),a=r%e===0;a&&(t[i]=[]),t[i].push(o[r])}return angular.equals(n.arrayinSliceOf,t)?n.arrayinSliceOf:(n.arrayinSliceOf=t,t)}}angular.module("app").filter("date",n).filter("time",o).filter("datetime",e).filter("reverse",t).filter("with",r).filter("inSlicesOf",i)}(),function(){"use strict";function n(n,o,e,t){function r(e,t,r){var i={};return t&&(i.title=t),e&&(i.template=e),i.cancelText=r&&r.length>0?r[0]:"Non",i.okText=r&&r.length>1?r[1]:"Oui",o.confirm(i).then(function(o){return o?o:n.reject()})}function i(n,e,t){var r={};return e&&(r.title=e),n&&(r.template=n),r.okText=t&&t.length>0?t[0]:"Ok",o.alert(r)}function a(n){t.show(n)}function u(o,t){var r=n.defer();return e.show({titleText:t,buttons:o,buttonClicked:function(n){return r.resolve(o[n]),!0},cancel:function(){r.reject()}}),r.promise}return{confirm:r,showInfo:i,showError:i,showToast:a,showOptions:u}}angular.module("app").factory("UiUtils",n)}();
//# sourceMappingURL=data:application/json;base64,
